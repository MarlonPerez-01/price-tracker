<form id="form-price-tracker" class="price-tracker__form">
  <input id="name" class="form-input" type="text" name="name" placeholder="Ingresa tu nombre" aria-label="Name"
         required>
  <span id="name-error" class="error"></span>

  <input id="email" class="form-input" type="email" name="email" placeholder="Ingresa tu correo" aria-label="Email"
         required>
  <span id="email-error" class="error"></span>

  <button id="btnSend" class="shopify-payment-button__button shopify-payment-button__button--unbranded" type="button">
    Envíame actualización de precio
  </button>
  <span id="general-error" class="error"></span>
</form>

<div id="myModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <span id='closeModal' class="close">&times;</span>
    </div>
    <div class="modal-body">
      <p id="modalMessage" class="text-center"></p>
    </div>
  </div>
</div>

<script>
  const modalTracking = document.getElementById('myModal');
  const closeModalSpan = document.getElementById('closeModal');

  const openModal = () => {
    modalTracking.style.display = 'block';
  };

  closeModalSpan.onclick = function() {
    modalTracking.style.display = 'none';
  };

  window.onclick = function(event) {
    if (event.target === modalTracking) {
      modalTracking.style.display = 'none';
    }
  };

  async function submitUserDetails(name, email, product) {
    // Se valida que el nombre no esté vacío
    if (!name || name.trim().length === 0) {
      throw new Error('Ingresa un nombre válido');
    }

    // Se valida que el correo tenga un formato correcto
    const emailRegex = /\S+@\S+\.\S+/;
    if (!email || !emailRegex.test(email)) {
      throw new Error('Ingresa un correo electrónico válido');
    }

    try {
      const url = '{{ block.settings.endpointSubscription }}';
      console.info('URL:', url);


      // Se obtienen los detalles del producto
      const productDetails = {{ product | json }};
      console.log(productDetails);

      const product = {
        id: productDetails.id,
        name: productDetails.title,
        price: productDetails.variants[0].price
      };

      const body = JSON.stringify({ name, email, product });

      const options = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*' // FIXME: No debe ser utilizado en producción
        },
        body
      };

      const response = await fetch(url, options);
      const result = await response.json();

      if (response.ok) {
        document.getElementById('modalMessage').textContent = '¡Gracias por suscribirte! Te enviaremos actualizaciones de precio pronto.';
        openModal();
      } else if (response.status === 400) {
        // Si el código de estado es 400, muestra el mensaje de error del servidor
        throw new Error(result.message);
      } else {
        // Si no es 400, muestra un mensaje genérico de error
        throw new Error('Hubo un error. Por favor, inténtalo de nuevo.');
      }
    } catch (error) {
      // Muestra el modal con el mensaje de error
      document.getElementById('modalMessage').textContent = error.message;
      openModal();
      console.error(error.message);
    }
  }

  async function handleButtonClick() {
    console.log('handleButtonClick');
    const name = document.getElementById('name').value;
    const email = document.getElementById('email').value;
    const nameErrorSpan = document.getElementById('name-error');
    const emailErrorSpan = document.getElementById('email-error');
    const generalErrorSpan = document.getElementById('general-error');

    // Se limpian los mensajes de error previos
    nameErrorSpan.textContent = '';
    emailErrorSpan.textContent = '';
    generalErrorSpan.textContent = '';

    try {
      await submitUserDetails(name, email);
    } catch (error) {
      if (error.message === 'Ingresa un nombre válido') {
        nameErrorSpan.textContent = error.message;
      } else if (error.message === 'Ingresa un correo electrónico válido') {
        emailErrorSpan.textContent = error.message;
      } else {
        generalErrorSpan.textContent = 'Hubo un error. Por favor, inténtalo de nuevo.';
        console.error(error.message);
      }
    }
  }

  document.getElementById('btnSend').addEventListener('click', handleButtonClick);
</script>

<style>
  .price-tracker__form {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-top: 6rem;
  }

  @media (min-width: 472px) {
    .price-tracker__form {
      max-width: 62%;
    }
  }

  @media (min-width: 748px) {
    .price-tracker__form {
      max-width: 90%;
    }
  }

  .form-input {
    border: 1px solid #000;
    border-radius: 5px;
    height: 50px;
    line-height: normal;
    color: #282828;
    display: block;
    width: 100%;
    box-sizing: border-box;
    user-select: auto;
    padding: 0 6px 0 12px;
  }

  .price-tracker__form input:focus-visible {
    outline: none;
    box-shadow: none !important;
  }

  .error {
    font-size: 0.8em;
    color: red;
    margin-bottom: 0.5rem;
  }

  .modal {
    display: none;
    position: fixed;
    z-index: 1;
    padding-top: 100px;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0, 0, 0);
    background-color: rgba(0, 0, 0, 0.4);
  }

  .modal-content {
    position: relative;
    background-color: #fefefe;
    max-width: 600px;
    margin: auto;
    padding: 0;
    border: 1px solid #888;
    width: 80%;
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    -webkit-animation-name: animatetop;
    -webkit-animation-duration: 0.4s;
    animation-name: animatetop;
    animation-duration: 0.4s
  }

  /* Add Animation */
  @-webkit-keyframes animatetop {
    from {
      top: -300px;
      opacity: 0
    }
    to {
      top: 0;
      opacity: 1
    }
  }

  @keyframes animatetop {
    from {
      top: -300px;
      opacity: 0
    }
    to {
      top: 0;
      opacity: 1
    }
  }

  .close:hover,
  .close:focus {
    color: #000;
    text-decoration: none;
    cursor: pointer;
  }

  .modal-header {
    padding: 2px 16px;
    min-height: 50px;
    background-color: #96bf48;
    color: white;
  }

  .modal-body {
    padding: 2px 16px;
  }

  .text-center {
    text-align: center;
  }
</style>

{% schema %}
{
  "name": "Price Tracker",
  "target": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "Producto",
      "autofill": true
    },
    {
      "type": "text",
      "id": "endpointSubscription",
      "label": "Endpoint de suscripción",
      "default": "https://ticket-mrs-dates-cas.trycloudflare.com/api/subscriptions"
    }
  ]
}
{% endschema %}


